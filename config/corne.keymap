/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        altgr {
            bindings = <&kt RIGHT_ALT>;
            key-positions = <12 36>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB             &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Z      &kp U  &kp I             &kp O    &kp P      &kp BSPC
&kp LS(LEFT_SHIFT)  &kp A  &kp S  &kp D             &kp F  &kp G        &kp H      &kp J  &kp K             &kp L    &kp SEMI   &kp DEL
&kp LCTRL           &kp Y  &kp X  &kp C             &kp V  &kp B        &kp N      &kp M  &kp COMMA         &kp DOT  &kp MINUS  &kp ESC
                                  &kp LA(LEFT_ALT)  &mo 1  &kp ENTER    &kp SPACE  &mo 2  &kp LG(LEFT_GUI)
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&kp TAB    &kp N1          &kp N2          &kp N3           &kp N4  &kp N5       &kp N6     &kp N7    &kp N8         &kp N9     &kp N0        &kp BSPC
&trans     &trans          &kp UP_ARROW    &trans           &trans  &trans       &kp LEFT   &kp DOWN  &kp UP         &kp RIGHT  &kp QUESTION  &kp EXCL
&kp LSHFT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans       &trans     &trans    &trans         &kp COLON  &kp ASTERISK  &kp APOS
                                           &kp LEFT_ALT     &trans  &kp ENTER    &kp SPACE  &mo 3     &kp RIGHT_GUI
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp TAB    &kp EXCL    &kp AT             &kp HASH           &kp DLLR          &kp PRCNT           &kp AMPERSAND  &kp SLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp APOSTROPHE  &kp BSPC
&kp LCTRL  &trans      &kp C_VOLUME_UP    &kp LESS_THAN      &kp GREATER_THAN  &kp CARET           &kp MINUS      &kp EQUAL  &kp LBKT              &kp RBKT               &kp BSLH        &kp GRAVE
&kp LSHFT  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_NEXT         &trans            &trans              &kp ASTERISK   &kp PLUS   &kp LBRC              &kp RBRC               &kp PIPE        &kp TILDE
                                          &kp RA(RIGHT_ALT)  &trans            &kp C_PLAY_PAUSE    &kp RET        &trans     &kp RIGHT_GUI
            >;
        };

        layer_3 {
            bindings = <
&kp F1          &kp F2      &kp F3  &kp F4  &kp F5  &kp F6    &trans  &trans  &trans      &trans  &trans  &trans
&bt BT_CLR_ALL  &bt BT_NXT  &trans  &trans  &trans  &trans    &trans  &trans  &caps_word  &trans  &trans  &trans
&trans          &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans      &trans  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
